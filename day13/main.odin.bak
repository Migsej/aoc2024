package main

import "core:fmt"
import "core:strconv"
import "core:os"
import "core:strings"
import "core:math"

game :: struct {
  a_x: int,
  a_y: int,
  b_x: int,
  b_y: int,
  prize_x: int,
  prize_y: int,
}


playgame :: proc(game: game) -> int {
  a_effenciency := math.sqrt(f64(game.a_x*game.a_x + game.a_y*game.a_y)) / 3
  b_effenciency := math.sqrt(f64(game.b_x*game.b_x + game.b_y*game.b_y)) / 1

  cheap_x: int
  cheap_y: int
  cheap_price: int
  expensive_x: int
  expensive_y: int
  expensive_price: int
  if a_effenciency <= b_effenciency {
    cheap_x = game.a_x
    cheap_y = game.a_y
    cheap_price = 3
    expensive_x = game.b_x
    expensive_y = game.b_y
    expensive_price = 1
  } else {
    cheap_x = game.b_x
    cheap_y = game.b_y
    cheap_price = 1
    expensive_x = game.a_x
    expensive_y = game.a_y
    expensive_price = 3
  }

  x := 0
  y := 0

  result := 0
  for ((game.prize_y - y) % cheap_y) != 0 || (game.prize_x - x) % cheap_x != 0 {
    result += expensive_price
    if (result/expensive_price) > 100 {
      return 0
    }
    x += expensive_x
    y += expensive_y
    if x == game.prize_x && y == game.prize_y {
      return result
    }
    if x > game.prize_x || y > game.prize_y {
      return 0
    }
  }
  cheap_presses := (game.prize_x - x) / cheap_x
  if cheap_presses > 100 {
    return 0
  }
  fmt.println(cheap_presses, result/expensive_price)
  return result + (cheap_presses*cheap_price)
}

main :: proc() {
	data, ok := os.read_entire_file("./real_input.txt")
	if !ok {
  	fmt.println("coluld not read file")
		return 
	}
	defer delete(data)
	data_str := transmute(string)data

  games := make([dynamic]game, 0)
  i := 0
  structindex := 0
	newgame: game = ---
	for {
  	nextnum := strings.index_any(data_str[i:], "0123456789")
  	if nextnum == -1 {
    	break
  	}
  	i += nextnum
  	value := strconv.atoi(data_str[i:])
  	switch structindex {
    	case 0:
      	newgame.a_x = value
    	case 1:
      	newgame.a_y = value
    	case 2:
      	newgame.b_x = value
    	case 3:
      	newgame.b_y = value
    	case 4:
      	newgame.prize_x = value
    	case 5:
      	newgame.prize_y = value
      	append(&games, newgame)
  	}
  	structindex = (structindex +1) % 6
  	for strings.contains_rune("0123456789", rune(data_str[i])) {
    	i += 1
  	}
	}

  result := 0
	for game in  games {
  	result += playgame(game);
	}
	fmt.println(result)
}
